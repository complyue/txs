
conc = 5;
objs'per'tx = 10;

total'objs = 1080000;
batch'seconds = 3;

total'txc = total'objs / objs'per'tx;


db = {};

print $ "Populating using concurrency: " ++ conc;
diag = diagKit();

-- | fork more threads each with a copy of the global scope at the time of the
-- fork, and wait all threads terminate before return.
--
-- concur :: NumThreads -> Any -> NilValue
concur conc {

  -- | thread local dataset
  tls = {};
  -- | thread local counter for object identifier
  tlc = 0;

  -- `concur'id` is a number assigned to each child thread's copied scope,
  -- by `concur` upon it starts the thread
  -- have all objects referenced by global db, so they are not GC'ed
  db@concur'id = tls;

  -- | thread local metrics
  tld = diag.threadLocalDiag batch'seconds;

  -- | repeat the evaluation of its argument expression, for the specified
  -- number of times.
  --
  -- repeat :: CountNumber -> Any -> NilValue
  repeat { total'txc / conc } {
    repeat objs'per'tx {

      tlc = tlc + 1;

      -- the actual write business, one STM TX block per object insertion
      (
        obj = {};
        obj.oid = tlc;
        obj.db = db;
        tls@tlc = obj;
      );

    };

    -- | report the completion of one transaction, it's up to the
    -- implementation of the host diagnostic class that, how statistics, like
    -- TPS over time, are gathered and visualized.
    --
    -- diagKit.threadLocalDiag.metricOneTx :: Any -> NilValue
    tld.metricOneTx();

  };

  tld.doneDiag();
};

diag.summarize();


print $ "Scanning using concurrency: " ++ conc;
diag = diagKit();

concur conc {

  tls = db@concur'id;
  tlc = 0;

  tld = diag.threadLocalDiag batch'seconds;

  repeat { total'txc / conc } {

    repeat objs'per'tx {

      tlc = tlc + 1;

      -- the actual read business
      obj = tls@tlc;
      assert "object exists" tlc (obj.oid);

    };

    tld.metricOneTx();
    
  };

  tld.doneDiag();
};

diag.summarize();
