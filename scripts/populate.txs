
-- put the db object into the global scope, before `concur` copies it
-- for each thread to start running concurrently
db = {};
db.cntr = 1;

-- | fork more threads each with a copy of the global scope at the time of the
-- fork, and wait all threads terminate before return.
--
-- concur :: NumThreads -> Any -> NilValue
concur 3 $

  -- | repeat the evaluation of its argument expression, for the specified
  -- number of times.
  --
  -- repeat :: CountNumber -> Any -> NilValue
  repeat 600000 {

    -- assign one global unique identifier
    --
    -- guid :: Any -> IntValue
    ident = guid ();

    obj = {};
    obj.eid = ident;
    -- todo more obj attrs to fill
    db@ident = obj;

    -- | report the completion of one transaction, it's up to the
    -- implementation of the host procedure that, how statistics, like TPS
    -- over time, are gathered and visualized.
    --
    -- metricOneTx :: Any -> NilValue
    metricOneTx ();
  
  }
