
-- | 'print' is a builtin global procedure as you would expect as the norm.
--
-- print :: TargetValue -> NilValue
print "Hello, world!";

-- | 'assert' throws error when assertion failed, evals to a confirmation
-- message otherwise. note the message is ignored unless you print it
-- explicitly, or it is the last expression of a TXS program, which will be
-- printed anyway by the interpreter on successful program termination.
--
-- assert :: AssertionMessage -> ExpectedValue -> TargetValue -> StrValue
assert "basic arithmetic eval correctly" 23 $ 8 + 3 * (7-2);

-- one distinct object is created from each evaluation of a literal `{}`
obj = {};

-- (.) is an operator mimicking the dot-notation in C and most OO languages
-- (=) is an operator mimicking assignment in C and similar languages
( obj.name = "egg"; obj.age = 1; );
-- be ware of transactional semantics of above parenthesis quoting

-- (++) is the concatenate operator, joining 2 values in string form
print $ "At first it's the " ++ obj.name ++ " at " ++ obj.age;
-- `print` takes only one argument, so the use of ($) operator above

-- (@) at-notation is rarely seen elsewhere, it's roughly mimicking `o[key]`
-- in JavaScript, that to get/set an attribute by possibly dynamicly computed
-- key. also similar to Python's `getattr()/setattr()`, but TXS has it more
-- like a dedicated syntax, by implementation of the builtin operator.
( obj@"name" = "baby"; obj@"age"  = obj.age + 1; );
-- be ware of transactional semantics of above parenthesis quoting

print { "Then it's the " ++ obj.name ++ " at " ++ obj@"age" };
-- alternatively, `print`'s argument can be quoted by braces as shown above

-- that's almost all you need to know about TXS the language, and there are
-- more builtin global procedures aiding the experiments with respect to 
-- performance traits etc. check out the details from the repository at:
--  https://github.com/complyue/txs
