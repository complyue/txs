{-
 - Transaction Script (TXS) is a minimum language exprimenting with the idea
 - for composibility of STM transactions to be brought to the scripting level.
 -
 - TXS the language is dynamic, eager, interpreted, while the syntax is really
 - minimum and following Haskell. There is no layout rule, line breaks are
 - treated as plain white spaces.
 -
 - White space and ($) are function application operators as in Haskell, as
 - well they have highest and lowest precedence respectively in TXS.
 -
 - Object (RefValue) is the only mutable data structure at runtime in TXS,
 - others are all immutable types, including: NilValue, IntValue, StrValue.
 -
 - The interpreted execution always run against a single, shared global scope,
 - while the global scope is a plain object with no difference to one created
 - by script code from `{}` literal, but populated with builtin host
 - procedures.
 -
 - One tricky treatment in TXS is that: Any value appears unary applicable,
 - and unless it's a real callable object implemented in the host language
 - (i.e. Haskell), the application works pretty much like `seq` in Haskell.
 - This way the ($) can appear and act as the semicolon (;) as in a typical
 - imperative programming language, while TXS don't really have statements,
 - but merely expressions as in a pure functional language.
 -
 - Round brackets (parenthesis) is the precedence workaround as well as in
 - most languages, but it also delimits transaction boundaries in TXS.
 - 
 - That is, parenthesis quoted expressions form a transactional block,
 - guaranteed to be evaluated in a single STM transaction, while expressions
 - those not in any parenthesis will be evaluated in as many separate STM
 - transactions as possible, while strictly sequential. This is the major
 - experiment TXS intended to perform.
 -}

-- | 'print' is a builtin global procedure as you would expect as the norm.
--
-- print :: TargetValue -> NilValue
print "Hello, world!"  $

-- | 'assert' throws error when assertion failed, evals to a confirmation
-- message otherwise. note the message is ignored unless you print it
-- explicitly, or it is the last expression of a TXS program, which will be
-- printed anyway by the interpreter on successful program termination.
--
-- assert :: AssetionMessage -> ExpectedValue -> TargetValue -> StrValue
assert "basic arithmetic eval correctly" 23 $ 8 + 3 * (7-2)  $

-- one distinct object is created from each evaluation of a literal `{}`
obj = {}          $

-- (.) is an operator mimicking the dot-notation in C and most OO languages
-- (=) is an operator mimicking assignment in C and similar languages
obj.name = "egg"  $
obj.age = 1       $

-- (++) is the concatenate operator, joining 2 values in string form
print ("At first it's the " ++ obj.name ++ " at " ++ obj.age)  $

-- (@) at-notation is rarely seen elsewhere, it's roughly mimicking `o[key]`
-- in JavaScript, that to get an attribute by possibly dynamicly computed key
-- (while the dynamic attribute key has to be a StrValue in TXS).
-- also similar is Python's `getattr()`, but TXS has it as a syntax.
obj@"name" = "baby"       $
obj@"age"  = obj.age + 1  $

print ("Then it's the " ++ obj.name ++ " at " ++ obj@"age")  $

-- the whole TXS program has to be a single expression, putting a nil at the
-- very end of it, so there is the idiom for every single "statement" visually
-- ends with a ($), intuited similar to a semicolon for comfort.
nil

-- that's almost all you need to know about TXS the language, and there are
-- more builtin global procedures aiding the experiments with respect to 
-- performance traits etc. check out the details at:
--  https://github.com/complyue/txs/blob/master/src/RT.hs
